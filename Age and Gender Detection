import cv2
import numpy as np

# Paths to models
FACE_MODEL = "res10_300x300_ssd_iter_140000_fp16.caffemodel"
FACE_PROTO = "deploy.prototxt"
AGE_MODEL = "age_net.caffemodel"
AGE_PROTO = "deploy_age.prototxt"
GENDER_MODEL = "gender_net.caffemodel"
GENDER_PROTO = "deploy_gender.prototxt"

# Age and gender labels
AGE_BUCKETS = ['(0-2)', '(4-6)', '(8-12)', '(15-20)', '(25-32)', '(38-43)', '(48-53)', '(60-100)']
GENDER_LABELS = ['Male', 'Female']

# Load models
face_net = cv2.dnn.readNetFromCaffe(FACE_PROTO, FACE_MODEL)
age_net = cv2.dnn.readNetFromCaffe(AGE_PROTO, AGE_MODEL)
gender_net = cv2.dnn.readNetFromCaffe(GENDER_PROTO, GENDER_MODEL)

# Helper function to detect faces
def get_faces(frame, confidence_threshold=0.7):
    blob = cv2.dnn.blobFromImage(frame, 1.0, (300, 300), [104, 117, 123], swapRB=False, crop=False)
    face_net.setInput(blob)
    detections = face_net.forward()
    h, w = frame.shape[:2]
    faces = []
    for i in range(detections.shape[2]):
        confidence = detections[0, 0, i, 2]
        if confidence > confidence_threshold:
            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
            box = box.astype(int)
            faces.append(box)
    return faces

# Helper function to predict gender and age
def predict_age_and_gender(face_img):
    blob = cv2.dnn.blobFromImage(face_img, 1.0, (227, 227), [78.4263377603, 87.7689143744, 114.895847746], swapRB=False)
    gender_net.setInput(blob)
    gender_preds = gender_net.forward()
    gender = GENDER_LABELS[gender_preds[0].argmax()]

    age_net.setInput(blob)
    age_preds = age_net.forward()
    age = AGE_BUCKETS[age_preds[0].argmax()]
    return gender, age

# Main function
def detect_age_and_gender(video_source=0):
    cap = cv2.VideoCapture(video_source)

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Detect faces
        faces = get_faces(frame)

        for box in faces:
            x1, y1, x2, y2 = box
            face_img = frame[y1:y2, x1:x2]
            if face_img.size == 0:
                continue

            # Predict gender and age
            gender, age = predict_age_and_gender(face_img)

            # Draw results
            label = f"{gender}, {age}"
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)

        cv2.imshow("Age and Gender Detection", frame)

        # Break on pressing 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# Run the detection
if __name__ == "__main__":
    detect_age_and_gender()
