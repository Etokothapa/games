import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.arima.model import ARIMA
import yfinance as yf

# Download stock market data
def get_stock_data(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    data['Date'] = data.index
    data = data[['Date', 'Close']]
    data.set_index('Date', inplace=True)
    return data

# Plot the time series
def plot_time_series(data, title="Stock Price Over Time"):
    plt.figure(figsize=(12, 6))
    plt.plot(data, label="Close Price")
    plt.title(title)
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.legend()
    plt.grid()
    plt.show()

# Split data into training and testing sets
def train_test_split_ts(data, test_size=0.2):
    n = len(data)
    train_size = int((1 - test_size) * n)
    train = data[:train_size]
    test = data[train_size:]
    return train, test

# Forecasting using ARIMA
def arima_forecasting(train, test, order=(1, 1, 1)):
    model = ARIMA(train, order=order)
    model_fit = model.fit()
    print(model_fit.summary())

    # Forecast
    forecast = model_fit.forecast(steps=len(test))
    forecast_series = pd.Series(forecast, index=test.index)

    # Plot results
    plt.figure(figsize=(12, 6))
    plt.plot(train, label="Training Data")
    plt.plot(test, label="Actual Data", color='orange')
    plt.plot(forecast_series, label="Forecasted Data", color='green')
    plt.title("ARIMA Forecast vs Actual Data")
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.legend()
    plt.grid()
    plt.show()

    return forecast_series

# Main function
def main():
    ticker = "AAPL"  # Example: Apple Inc.
    start_date = "2015-01-01"
    end_date = "2023-01-01"

    # Step 1: Get the data
    data = get_stock_data(ticker, start_date, end_date)
    plot_time_series(data)

    # Step 2: Train-test split
    train, test = train_test_split_ts(data['Close'], test_size=0.2)

    # Step 3: Forecast using ARIMA
    order = (5, 1, 0)  # Example order, adjust based on ACF/PACF analysis
    forecast_series = arima_forecasting(train, test, order=order)

    # Step 4: Evaluate model
    mse = mean_squared_error(test, forecast_series)
    print(f"Mean Squared Error: {mse}")

if __name__ == "__main__":
    main()
