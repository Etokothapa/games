import pygame
import random

# Initialize Pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

# Screen setup
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Bounce Quest")

# Clock for controlling the frame rate
clock = pygame.time.Clock()
FPS = 60

# Player settings
player_width, player_height = 100, 10
player_x = WIDTH // 2 - player_width // 2
player_y = HEIGHT - 50
player_speed = 8

# Ball settings
ball_radius = 10
ball_x = random.randint(ball_radius, WIDTH - ball_radius)
ball_y = HEIGHT // 2
ball_speed_x = 5
ball_speed_y = -5

# Obstacles
obstacle_width, obstacle_height = 100, 20
obstacle_list = [
    pygame.Rect(random.randint(0, WIDTH - obstacle_width), random.randint(50, 300), obstacle_width, obstacle_height)
    for _ in range(5)
]

# Score
score = 0
font = pygame.font.Font(None, 36)

def draw_player(x, y):
    pygame.draw.rect(screen, BLUE, (x, y, player_width, player_height))

def draw_ball(x, y):
    pygame.draw.circle(screen, RED, (x, y), ball_radius)

def draw_obstacles(obstacles):
    for obstacle in obstacles:
        pygame.draw.rect(screen, BLACK, obstacle)

def display_score(score):
    score_text = font.render(f"Score: {score}", True, BLACK)
    screen.blit(score_text, (10, 10))

# Game loop
running = True
while running:
    screen.fill(WHITE)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Movement controls
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and player_x > 0:
        player_x -= player_speed
    if keys[pygame.K_RIGHT] and player_x < WIDTH - player_width:
        player_x += player_speed

    # Ball movement
    ball_x += ball_speed_x
    ball_y += ball_speed_y

    # Ball collision with walls
    if ball_x <= ball_radius or ball_x >= WIDTH - ball_radius:
        ball_speed_x *= -1
    if ball_y <= ball_radius:
        ball_speed_y *= -1

    # Ball collision with player
    if (player_y <= ball_y + ball_radius <= player_y + player_height and
            player_x <= ball_x <= player_x + player_width):
        ball_speed_y *= -1
        score += 1

    # Ball collision with obstacles
    for obstacle in obstacle_list:
        if obstacle.collidepoint(ball_x, ball_y):
            obstacle_list.remove(obstacle)
            ball_speed_y *= -1
            score += 5

    # Game over condition
    if ball_y > HEIGHT:
        running = False

    # Drawing elements
    draw_player(player_x, player_y)
    draw_ball(ball_x, ball_y)
    draw_obstacles(obstacle_list)
    display_score(score)

    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()
print(f"Game Over! Your score: {score}")
