import cv2
import face_recognition
import os

# Load known faces and their names
def load_known_faces(directory):
    known_encodings = []
    known_names = []

    for filename in os.listdir(directory):
        filepath = os.path.join(directory, filename)
        image = face_recognition.load_image_file(filepath)
        encoding = face_recognition.face_encodings(image)[0]
        known_encodings.append(encoding)
        known_names.append(os.path.splitext(filename)[0])  # Use filename as the person's name
    
    return known_encodings, known_names

# Recognize faces in a given image
def recognize_faces(input_image, known_encodings, known_names, output_image):
    # Load and process the input image
    image = face_recognition.load_image_file(input_image)
    face_locations = face_recognition.face_locations(image)
    face_encodings = face_recognition.face_encodings(image, face_locations)

    # Convert to BGR for OpenCV
    image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    # Loop through each face detected
    for location, encoding in zip(face_locations, face_encodings):
        matches = face_recognition.compare_faces(known_encodings, encoding)
        name = "Unknown"

        # Find the best match if any
        if True in matches:
            match_index = matches.index(True)
            name = known_names[match_index]

        # Draw a rectangle and add the name
        top, right, bottom, left = location
        cv2.rectangle(image_bgr, (left, top), (right, bottom), (0, 255, 0), 2)
        cv2.putText(image_bgr, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    # Save the result
    cv2.imwrite(output_image, image_bgr)
    print(f"Faces recognized and saved to {output_image}")

# Example usage
if __name__ == "__main__":
    known_faces_dir = "known_faces"  # Folder containing images of known people
    input_image = "input.jpg"        # Input image to process
    output_image = "output.jpg"      # Output image file

    # Load known faces
    encodings, names = load_known_faces(known_faces_dir)

    # Recognize and save results
    recognize_faces(input_image, encodings, names, output_image)
